on:
  workflow_call:
    inputs:
      installable:
        required: true
        type: string
      store-uri:
        required: true
        type: string
      public-key:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      role-to-assume:
        required: true
        type: string
      upload-image:
        required: false
        type: boolean
    secrets:
      secret-key:
        required: true
    outputs:
      store-path:
        value: ${{ jobs.build-and-push.outputs.store-path }}
      image-id:
        value: ${{ jobs.build-and-push.outputs.image-id }}
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      store-path: ${{ steps.build-and-push.outputs.store-path }}
      image-id: ${{ steps.register-image.outputs.image-id }}
    steps:
      - uses: actions/checkout@v4
      - id: get-cache-secret-key
        name: Get cache secret key
        run: |
          secret_key_file=$(mktemp)
          echo "${{ secrets.secret-key }}" > "$secret_key_file"
          echo "secret-key-file=$secret_key_file" >> "$GITHUB_OUTPUT"
      - name: Write post-build-hook
        run: |
          mkdir -p /opt/bin
          cat <<EOF > /opt/bin/post-build-hook
          #!/bin/sh
          set -eu
          set -f 
          export IFS=' '
          if ! command -v nix; then
            echo "Nix not found in PATH"
            exit 0
          fi
          echo Copying "$OUT_PATHS to ${{ inputs.store-uri }}"
          exec nix copy --to "${{ inputs.store-uri }}" $OUT_PATHS
          EOF
          chmod +x /opt/bin/post-build-hook
      - uses: DeterminateSystems/nix-installer-action@v16
        with:
          extra-conf: |
            extra-substituters = ${{ inputs.store-uri }}
            extra-trusted-public-keys = ${{ inputs.public-key }}
            secret-key-files = ${{ steps.get-cache-secret-key.outputs.secret-key-file }}
            post-build-hook = /opt/bin/post-build-hook

      - uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.role-to-assume }}
          output-credentials: true
      # Needed for substitution as that happens by nix-daemon and runs as root
      - name: Set up aws credentials for nix-daemon
        run: |
          sudo aws configure set aws_access_key_id ${{ steps.aws.outputs.aws-access-key-id }}
          sudo aws configure set aws_secret_access_key ${{ steps.aws.outputs.aws-secret-access-key }}
          sudo aws configure set aws_session_token ${{ steps.aws.outputs.aws-session-token }}
          sudo aws configure set region eu-central-1
      - id: build-and-push
        name: Build
        run: |
          store_path=$(nix build ${{ inputs.installable }} --print-out-paths)
          echo "store-path=$store_path" >> "$GITHUB_OUTPUT"
      - id: upload-snapshot
        if: ${{ inputs.upload-image }}
        name: upload snapshot
        run: |
          file=$(jq -r '.file' ${{ steps.build-and-push.outputs.store-path }}/nix-support/image-info.json)
          snapshot_id=$(nix run nixpkgs#coldsnap upload -- --wait "$file")
          echo "snapshot-id=$snapshot_id" >> "$GITHUB_OUTPUT"
      - id: register-image
        if: ${{ inputs.upload-image }}
        name: Register image
        run: |
          label=$(jq -r '.label' ${{ steps.build-and-push.outputs.store-path }}/nix-support/image-info.json)
          image_id=$(aws ec2 register-image --name "${{ inputs.image-name }} /$label" \
            --virtualization-type hvm \
            --block-device-mappings "DeviceName=/dev/xvda,Ebs={SnapshotId=${{ steps.upload-snapshot.outputs.snapshot-id }} }" \
            --architecture x86_64 \
            --root-device-name /dev/xvda \
            --query ImageId)
          echo "image-id=$image_id" >> "$GITHUB_OUTPUT"

